\documentclass[article, nojss]{jss}
\usepackage{amsthm}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{color}
\usepackage{afterpage}

\newtheorem{exmp}{Example}[section]
\newtheorem{rexample}{R Example}[section]
% !Rnw weave = knitr
% \VignetteIndexEntry{The glarma package}
% \VignetteEngine{knitr::knitr}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% declarations for jss.cls %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% almost as usual
\author{Paul Murrell\\
  University of Auckland
  \And
  David J. Scott\\
  University of Auckland
}

\title{The \pkg{metaplot} Gallery}

%% for pretty printing and a nice hypersummary also set:
\Plainauthor{Paul Murrel, David Scott} %% comma-separated

\Plaintitle{The metaplot Gallery} %% without formatting

\Shorttitle{The \pkg{metaplot} Gallery} %% a short title (if necessary)

%% an abstract and keywords
\Abstract{
  This gallery exhibits the capabilities of the
  \pkg{metaplot} package and also serves as a test routine for the
  package.
}

\Keywords{
  meta-analysis, forest plots, \pkg{metaplot}, \pkg{rmeta},
  \pkg{meta}, \pkg{metafor}, \proglang{R}
}

\Plainkeywords{
  meta-analysis, forest plots, metaplot, rmeta,
  meta, metafor, R\
}

%% publication information
%% NOTE: Typically, this can be left commented and will be filled out by the technical editor
%% \Volume{50}
%% \Issue{9}
%% \Month{June}
%% \Year{2012}
%% \Submitdate{2012-06-04}
%% \Acceptdate{2012-06-04}

%% The address of (at least) one author should be given
%% in the following format:
\Address{
  David J Scott\\
  Department of Statistics \\
  The University of Auckland\\
  PB 92019\\
  Auckland 1142\\
  New Zealand\\
  E-mail: \email{d.scott@auckland.ac.nz}\\
  URL: \url{http://statistics.auckland.ac.nz/~dscott}
}
%% It is also possible to add a telephone and fax number
%% before the e-mail in the following format:
%% Telephone: +43/512/507-7103
%% Fax: +43/512/507-2851

%% for those who use Sweave please include the following line (with % symbols):
%% need no \usepackage{Sweave.sty}

%% end of declarations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}

<<setup, include=FALSE>>=
library(knitr)
opts_chunk$set(comment = NA, fig.path='Figures/metaplot',
               fig.align = 'center', fig.show = 'hold')
options(replace.assign = TRUE, width = 60)
knit_hooks$set(rexample = function(before, options, envir) {
    if (before) {
        sprintf('\\begin{rexample}\\label{%s}\\hfill{}', options$label)
    } else {
        '\\end{rexample}'
    }
}
)
@


\section{Introduction}
\label{sec:Intro}

This document gives examples of the use of the package \pkg{metaplot}
to produce forest plots using output from meta-analysis packages
available on CRAN.

It also serves as a regression test for the package. Because the
output from \pkg{metaplot} is graphical, the usual test procedures for
evaluating numerical output are not appropriate.

The \pkg{metaplot} package was first developed to draw forest plots
using meta-analysis results from the \pkg{meta} package, so in many
cases the examples use data from that package.


\section[drawMeta()]{The \code{drawMeta()} function}
\label{sec:drawmeta}

The basic function to draw forest plots is the \code{drawMeta()}
function, which is generic. We start with a simple example of the use
of this function, using output from the function \code{metabin()} from
the package \pkg{meta}.

Analysis of binary outcome data by the package \pkg{meta} produces an
object of class \code{c('metabin', 'meta')}.

We first initialize, then perform a meta-analysis using the \pkg{meta}
package. The generic functions \code{meta2DF()} and \code{metaDF2Matrix}
convert the output from \code{metabin()} to a data frame, and from a
data frame to a matrix respectively. The actual functions carrying out
these transformations are \code{meta2DF.metabin()} and
\code{metaDF2Matrix.metabinDF()}, which respectively produce objects of
class \code{'metabinDF'} and \code{'metabinM'}.

<<metabin1>>=
library(meta)
library(metaplot)
binary <- metabin(c(12, 16), c(16, 20), c(3, 9), c(15, 19),
                  studlab = c("Richstein 1980", "Lechler 1986"))
df <- meta2DF(binary)
matrix <- metaDF2Matrix(df, stat = NULL)
@

Then the forest plot shown in Figure~\ref{fig:drawMeta1} is produced
using the basic \code{drawMeta()} function:
<<drawMeta1, fig.width=7, fig.height=2, out.width = '\\linewidth', fig.cap = "Basic forest plot from \\code{drawMeta()}">>=
drawMeta(matrix)
@

Since \code{drawMeta()} is generic, the function which produces the
plot is actually \code{drawMeta.metabinM}.

It is easy to change the location of the columns relative to the plot
using an argument to \code{drawMeta()} with the result shown in
Figure~\ref{fig:drawMeta2}.

<<drawMeta2, fig.width=7, fig.height=2, out.width = '\\linewidth', fig.cap = "Basic forest plot from \\code{drawMeta()}">>=
drawMeta(matrix, plotCol = 2)
@

For continous outcome data, the \code{metacont()} function from the
\code{'meta'} package produces an object of class \code{c('metacont',
  'meta')}. This object is converted to a data frame then a matrix
after which it can be plotted by a call to the generic
\code{drawMeta}. Here is an example of this procedure when the data
comprises a single group only. First the data is retrieved and
transformed.

<<metacont1>>=
data(Fleiss93cont)
meta1 <- metacont(n.e, mean.e, sd.e, n.c, mean.c,
                  sd.c, data = Fleiss93cont, sm = "SMD")
Data <- meta2DF(meta1)

matrix <- metaDF2Matrix(Data,
                        order = c("study", "effect"),
                        roundCols = c("effect" = 2),
                        hgap = 2)
@

Then the plot can be drawn.

<<drawMeta3, fig.width=7, fig.height=2, out.width = '\\linewidth', fig.cap = "Forest plot from \\code{drawMeta()} with continuous outcome data">>=
drawMeta(matrix,
         plotCol = 3,
         plotHead = "Weighted Mean Difference")
@

It is also possible to produce a forest plot of data where there are groups

<<metacont2>>=
meta <- metacont(n.e, mean.e, sd.e, n.c, mean.c, sd.c,
                 data = Fleiss93cont, sm = "SMD",
                 byvar = c(1,2,1,1,2), bylab = "group")
Data <- meta2DF(meta, title = "Mental Health Treatment",
                rowOrder = "effect", decreasing = TRUE)
matrix <- metaDF2Matrix(Data,
                        groupLab = c("Group One", "Group Two", "Overall"),
                        order = c("study", "msd.e", "msd.c", "effect",
                                  "ci", "w.fixed", "w.random"),
                        roundCols = c("effect" = 2, "w.fixed" = 1,
                                      "w.random" = 1),
                        hgap=c(2,11,18), vgap = 5)
@

<<drawMeta4, fig.width=9, fig.height=4.5, out.width = '\\linewidth', fig.cap = "Forest plot from \\code{drawMeta()} with grouped continuous outcome data">>=
drawMeta(matrix,
         plotCol = 6,
         plotHead = "Weighted Mean Difference")
@

\clearpage

For binary outcome data, the \code{metabin()} function from the
\code{'meta'} package produces an object of class \code{c('metabin',
  'meta')}. This object is converted to a data frame then a matrix
after which it can be plotted by a call to the generic
\code{drawMeta}. Here is an example of this procedure when the data
comprises a number of groups. The data in this case is from the
\pkg{metafor} package. First the data is retrieved and
transformed.

<<metabin2>>=
require(metafor)
data(dat.bcg)
str(dat.bcg)
bcg <- data.frame(event.e = dat.bcg$tpos, n.e = dat.bcg$tpos + dat.bcg$tneg,
                  event.c = dat.bcg$cpos, n.c = dat.bcg$cpos + dat.bcg$cneg,
                  study = dat.bcg$author, year = dat.bcg$year)

meta <- metabin(event.e, n.e, event.c, n.c,
                studlab = paste(study, year),
                data = bcg, sm = "RR",
                byvar = c(2,2,2,2,3,3,2,2,2,1,1,1,1),
                bylab = "")
Data <- meta2DF(meta, title = "BCG Vaccine Against Tuberculosis",
                rowOrder = "effect", decreasing = TRUE)
matrix <- metaDF2Matrix(Data,
                        groupLab = c("Systematic Allocation",
                                     "Random Allocation",
                                     "Alternate Allocation",
                                     "Overall"),
                        order = c("study", "event.e", "n.e",
                                  "event.c", "n.c", "effect"),
                        roundCols = c("effect" = 2))
@

Then the plot can be drawn.

<<drawMeta5, fig.width=7, fig.height=2, out.width = '\\linewidth', fig.cap = "Forest plot from \\code{drawMeta()} with continuous outcome data">>=
drawMeta(matrix,
         plotCol = 6,
         plotHead = "Relative Risk")
@


\end{document}
